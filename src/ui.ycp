/**
 * File:	include/ldap/ui.ycp
 * Package:	Configuration of LDAP
 * Summary:	User interface functions.
 * Authors:	Thorsten Kukuk <kukuk@suse.de>
 *		Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * All user interface functions.
 */

{

    textdomain "ldap-client";

    import "Wizard";
    import "Ldap";

    include "ui/common_popups.ycp";
    include "network/ip.ycp";
    // include "network/dns.ycp";

    /**
     * The only dialog
     * @return	`back or `next
     */
    global define symbol LdapDialog () ``{

// help text 1/5
	string help_text = UI(_("<p>Here your machine can be set up as
<b>LDAP client</b> to authenticate your user with an OpenLDAP server.
Enter the name of the search base (base DN, e.g, dc=mydomain,dc=com)
in the first entry and the IP address of the LDAP server (e.g., 10.20.0.2)
in the second.
To deactivate LDAP services, click the button <b>Do not use LDAP</b>.</p>"));

// help text 2/5
	help_text = help_text + UI(_("<p>Some LDAP servers supports
StartTLS [RFC2830]. If your server supports it and it is configured,
you should activate <b>LDAP TLS/SSL</b> to encrypt your communication
with the LDAP server.</p>"));

// help text 3/5
	help_text = help_text + UI(_("<p>Normally, the LDAP version 3 protocol
will be used. If you have a LDAP server using protocol 2 (for example
OpenLDAP v1), you should activate <b>LDAP Version 2</b>.</p>"));

// help text 4/5
	help_text = help_text + UI(_("<p>If you deactivate LDAP, the current
LDAP entry for passwd in /etc/nsswitch.conf will be removed and replaced
with <i>compat</i>. The PAM configuration will be modified and
the LDAP entry removed.</p>"));

// help text 5/5
	help_text = help_text + UI(_("<p>If you activate LDAP, NSS and PAM
will be configured accordingly to use LDAP for user authentification.</p>"));

	boolean start = Ldap::start;
	string domain  = Ldap::GetDomain ();
	string server = Ldap::server;
	boolean ldap_tls = Ldap::ldap_tls;
	boolean ldap_v2 = Ldap::ldap_v2;
	boolean old_start = start;
	string old_domain = domain;
	string old_server = server;
	boolean old_ldap_tls = ldap_tls;
	boolean old_ldap_v2 = ldap_v2;

	term con = `HVSquash(
			     `Frame (_("LDAP client"),
				     `VBox (`VSpacing (0.2),
					    `RadioButtonGroup(`id(`rd),
							      // radio button label
							      `Left(
								    `HVSquash(
									      `VBox (
										     `Left (`RadioButton(`id(`ldapno), `opt (`notify), _("Do &not use LDAP"), !start)),
                                                                                 // radio button label
										     `Left(`RadioButton(`id(`ldapyes), `opt (`notify), _("&Use LDAP"), start)))))),
					    // text entry label
					    `HSquash(`TextEntry (`id (`ldapd), _("LDAP base &DN"), domain)),
					    // text entry label
					    `HSquash(`TextEntry (`id (`ldapa), _("&IP address of the LDAP server"), server)
						     ),
					    `VSpacing (0.2),
					    // check box label
					    `CheckBox (`id(`ldaps), _("LDAP &TLS/SSL"), ldap_tls),
					    `VSpacing (0.2),
					    // check box label
					    `CheckBox (`id(`ldapv), _("LDAP &Version 2"), ldap_v2),
					    `VSpacing (0.2)
					    )
				     )
			     );



	Wizard::SetContentsButtons (
	    // dialog title
	    _("LDAP Client Configuration"), con, help_text,
	    BackButtonLabel (), FinishButtonLabel ());

	UI::ChangeWidget (`id (`ldapd), `Enabled, start);
	UI::ChangeWidget (`id (`ldapa), `Enabled, start);
	UI::ChangeWidget (`id (`ldaps), `Enabled, start);
	UI::ChangeWidget (`id (`ldapv), `Enabled, start);

	any result = nil;
	do {
	    result = UI::UserInput ();

	    start = (UI::QueryWidget(`id(`rd), `CurrentButton) == `ldapyes);

	    if (result == `ldapyes || result == `ldapno) {
		UI::ChangeWidget(`id(`ldapd), `Enabled, start);
		UI::ChangeWidget(`id(`ldapa), `Enabled, start);
		UI::ChangeWidget(`id(`ldaps), `Enabled, start);
		UI::ChangeWidget (`id (`ldapv), `Enabled, start);
	    }

	    if (result == `next && start) {
		domain = UI::QueryWidget(`id(`ldapd), `Value);
		server = UI::QueryWidget(`id(`ldapa), `Value);
		ldap_v2 = UI::QueryWidget(`id(`ldapv), `Value);
		ldap_tls = UI::QueryWidget(`id(`ldaps), `Value);

		if (!check_ip4 (server))
		{
		    // error popup label
		    Report::Error(_("The IP address is incorrect."));
		    result = nil;
		    continue;
		}
	    }

	    if (result == `next)
	    {
		// if nothing is changed go back.
		if (old_start == start &&
		    old_domain == domain &&
		    old_server == server &&
		    old_ldap_tls == ldap_tls &&
		    old_ldap_v2 == ldap_v2)
		    result = `back;
		else
		    if (!Ldap::auto && ! UI::YesNoPopup(_("The configuration of the LDAP client will be saved\nand the client will be restarted.")))
			result = nil;
	    }

	} while (result != `back && result != `next && result != `cancel);

	if (result == `next)
	{
	    Ldap::start = start;
	    Ldap::SetDomain (domain);
	    Ldap::server = server;
	    Ldap::ldap_v2 = ldap_v2;
	    Ldap::ldap_tls = ldap_tls;
	}

	return result;
    }
}
