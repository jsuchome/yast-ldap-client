/**
 * File:	include/ldap/ui.ycp
 * Package:	Configuration of LDAP
 * Summary:	User interface functions.
 * Authors:	Thorsten Kukuk <kukuk@suse.de>
 *		Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * All user interface functions.
 */

{

    textdomain "ldap-client";

    import "Wizard";
    import "Ldap";
    import "Mode";
    import "Report";

    include "ui/common_popups.ycp";
    include "network/ip.ycp";

    include "ldap/edit_popups.ycp";

    global define boolean Modified () ``{

	return (Ldap::modified || Ldap::ldap_modified);
    }

    /**
     * The dialog that appears when the [Abort] button is pressed.
     * @return `abort if user really wants to abort, `back otherwise
     */
    global define symbol ReallyAbort () ``{

	boolean ret = true;
	if (!Mode::cont)
	{
	    if (Modified())
		ret = UI::ReallyAbortPopup (true);;
	}
	else
	{
	    ret = CallFunction(`inst_confirm_abort(`incomplete));
	}
	if ( ret )	return `abort;
	else		return `back;
    }

    /**
     * Read settings dialog
     * @return `abort if aborted and `next otherwise
     */
    global define symbol ReadDialog () ``{
	boolean ret = Ldap::Read();
        return ret ? `next : `abort;
    }

    /**
     * @return
     */
    global define symbol WriteConfirmationPopup ()``{

	// yes/no popup text
	if (!Mode::config && !Mode::cont && Modified() && !UI::YesNoPopup(_("The configuration of the LDAP client will be saved
and the client will be restarted.")))
	    return `back;

	return `next;
    }

    /**
     * Write settings dialog
     * @return `next
     */
    global define symbol WriteDialog() ``{

	// A callback function for abort
	block abort = ``{
	    // popup text
	    if (UI::PollInput () == `abort && UI::YesNoPopup (_("Really abort the writing process?")))
		return true;
	    return false;
	};

	if (Modified())
	    Ldap::Write (abort);
	return `next;
    }

    /**
     * The main dialog for ldap-client configuration
     * @return	`back, `next or `abort
     */
    global define symbol LdapDialog () ``{

	string help_text = _("FIXME!
<p>First, basic terms have to be described, like
<b>What does it mean \"DN\"</b>...</p>
<p>server:port</p>
");

// help text 1/5
	help_text = help_text + UI(_("<p>Here, your machine can be set up as an
<b>LDAP client</b> to authenticate your user with an OpenLDAP server.
Enter the name of the search base (base DN, such as dc=example,dc=com)
in the first entry and the LDAP server's address (e.g., ldap.example.com
or 10.20.0.2) in the second. Specify multiple servers by separating their
addresses with spaces. It must be possible to resolve the addresses
without using LDAP.
To deactivate LDAP services, click <b>Do Not Use LDAP</b>.</p>"));

// help text 2/5
	help_text = help_text + UI(_("<p>Some LDAP servers support
StartTLS [RFC2830]. If your server supports it and it is configured,
activate <b>LDAP TLS/SSL</b> to encrypt your communication
with the LDAP server.</p>"));

// help text 3/5
	help_text = help_text + UI(_("<p>Normally, the LDAP version 3 protocol
will be used. If you have a LDAP server using protocol 2 (for example
OpenLDAP v1), you should activate <b>LDAP Version 2</b>.</p>"));

// help text 4/5
	help_text = help_text + UI(_("<p>If you deactivate LDAP, the current
LDAP entry for passwd in /etc/nsswitch.conf will be removed. The PAM
configuration will be modified and the LDAP entry removed.</p>"));

// help text 5/5
	help_text = help_text + UI(_("<p>If you activate LDAP, NSS and PAM
will be configured accordingly to use LDAP for user authentification.</p>"));

// help text 5/5
	help_text = help_text + UI(_("<p>For configuration of LDAP user and
group settings, click <b>Advanced Configuration</b> button.</p>
"));

	// during installation, only starting ldap is enabled
	boolean start		= Mode::cont || Ldap::start;
	string domain		= Ldap::GetDomain ();
	string server		= Ldap::server;
	boolean ldap_tls	= Ldap::ldap_tls;
	boolean ldap_v2		= Ldap::ldap_v2;

	term con = `HVSquash(`VBox(
	    `Frame (_("LDAP client"),
	    `VBox (`VSpacing (0.2),
	    `RadioButtonGroup(`id(`rd),
		`Left(`HVSquash(`VBox (
		    `Left (`RadioButton(`id(`ldapno), `opt (`notify),
			// radio button label
			_("Do n&ot use LDAP"), !start)),
		    `Left(`RadioButton(`id(`ldapyes), `opt (`notify),
			// radio button label
			_("&Use LDAP"), start)))))),
	    // text entry label
	    `HSquash(`TextEntry (`id (`ldapd), _("LDAP base &DN"), domain)),
	    // text entry label
	    `HSquash(`TextEntry (`id (`ldapa), _("Addresses of LDAP &servers"),
		server)),
	    `VSpacing (0.2),
	    // check box label
	    `CheckBox (`id(`ldaps), _("LDAP &TLS/SSL"), ldap_tls),
	    `VSpacing (0.2),
	    // check box label
	    `CheckBox (`id(`ldapv), _("LDAP &Version 2"), ldap_v2),
	    `VSpacing (0.2)
	    )),
	    `VSpacing(1),
	    // pushbutton label
	    `PushButton (`id(`advanced), _("&Advanced configuration..."))
        ));

	Wizard::SetContentsButtons (
	    // dialog title
	    _("LDAP Client Configuration"), con, help_text,
	    BackButtonLabel(),
	    Mode::cont ? NextButtonLabel(): FinishButtonLabel());
//	    NextButtonLabel());

	// TODO Finish on "disable ldap"

	UI::ChangeWidget (`id (`ldapd), `Enabled, start);
	UI::ChangeWidget (`id (`ldapa), `Enabled, start);
	UI::ChangeWidget (`id (`ldaps), `Enabled, start);
	UI::ChangeWidget (`id (`ldapv), `Enabled, start);
	UI::ChangeWidget (`id (`advanced), `Enabled, start);

	// during installation, only enabling makes sence
	if (Mode::cont)
	    UI::ChangeWidget (`id (`ldapno), `Enabled, false);

	any result = nil;
	do {
	    result = UI::UserInput ();

	    start = (UI::QueryWidget(`id(`rd), `CurrentButton) == `ldapyes);

	    if (result == `ldapyes || result == `ldapno) {
		UI::ChangeWidget(`id(`ldapd), `Enabled, start);
		UI::ChangeWidget(`id(`ldapa), `Enabled, start);
		UI::ChangeWidget(`id(`ldaps), `Enabled, start);
		UI::ChangeWidget (`id (`ldapv), `Enabled, start);
		UI::ChangeWidget (`id (`advanced), `Enabled, start);

            }

	    if ((result == `next || result == `advanced) && start) {
		domain = UI::QueryWidget(`id(`ldapd), `Value);
		server = UI::QueryWidget(`id(`ldapa), `Value);
		ldap_v2 = UI::QueryWidget(`id(`ldapv), `Value);
		ldap_tls = UI::QueryWidget(`id(`ldaps), `Value);

		if (domain == "")
		{
		   // error popup label
                    Report::Error(_("Enter an LDAP base DN."));
                    result = nil;
                    continue;
                }

		if (server == "")
		{
		    // error popup label
		    Report::Error(_("Enter at least one address of an LDAP server."));
		    result = nil;
		    continue;
		}
	    }
	} while (!contains ([`back, `next, `cancel, `abort, `advanced], result));

	if (result == `next || result == `advanced)
	{
	    if (Ldap::start != start || Ldap::GetDomain() != domain ||
		Ldap::server != server || Ldap::ldap_v2 != ldap_v2 ||
		Ldap::ldap_tls != ldap_tls)
	    {
		Ldap::SetDomain (domain);
		Ldap::start	= start;
		Ldap::server	= server;
		Ldap::ldap_v2	= ldap_v2;
		Ldap::ldap_tls	= ldap_tls;
		Ldap::modified = true;
	    }
	}

	return result;
    }


global define symbol AdvancedConfigurationDialog () ``{

    string help_text = _("FIXME!") +

_("<p><b>Configuration Base DN</b> should be written in ldap.conf file,
while all other values are strored in LDAP.</p> ") +

_("<p>Template DN should not be edited?</p>") +

_("<p>Push the <b>Next</b> button to configure settings stored in LDAP...</p>");


    string base_config_dn = Ldap::GetMainConfigDN();
    string bind_dn	= Ldap::bind_dn;
    boolean file_server = Ldap::file_server;

    term contents = `HBox(`HSpacing (1.5), `VBox(
	// frame label
	`Frame (_("Access to LDAP Configuration"), `HBox(
	    `HSpacing (1), `VBox(
		`VSpacing(0.5),
		`TextEntry (`id (`base_config_dn),
		    // textentry label
		    _("&Configuration Base DN (Main Configuration Object)"),
		    base_config_dn),
		`VSpacing(0.5),
		/*
		// textentry label
		`TextEntry (`id (`templates), _("DN of Main &Template Object"),
		    templates_dn),
		`VSpacing(0.5),
		*/
		`TextEntry (`id (`bind_dn),
		    // textentry label
		    _("Bind &DN for LDAP Server"), bind_dn),
		`VSpacing(1)
	    ),
	    `HSpacing (1)
	)),
        `VSpacing(0.5),
        `Left(`CheckBox (`id(`file_server),
            // checkbox label
            _("F&ile Server (home directories are stored here)"), file_server)),
        `VSpacing(2)
	/*
	// pushbutton label
	`PushButton (`id(`configure), _("&Modules configuration..."))
	*/
	),
	`HSpacing (1.5));

    // dialog label
    Wizard::SetContentsButtons(_("Advanced Configuration"),
            contents, help_text, BackButtonLabel(), NextButtonLabel());

    any result = nil;
    while (true)
    {
	result = UI::UserInput ();
	if (contains ([`back, `cancel, `abort], result))
	    break;
	if (result == `next)
	{
	    bind_dn = UI::QueryWidget(`id(`bind_dn), `Value);
	    base_config_dn = UI::QueryWidget(`id(`base_config_dn), `Value);
	    file_server = UI::QueryWidget(`id(`file_server), `Value);
	    // TODO templates?

	    if (Ldap::GetMainConfigDN() != base_config_dn ||
		Ldap::bind_dn != bind_dn || Ldap::file_server != file_server)
	    {
		Ldap::bind_dn = bind_dn;
		Ldap::base_config_dn = base_config_dn;
		Ldap::file_server = file_server;
		Ldap::modified = true;
	    }
	    break;
	}
    }
    return result;
}

global define symbol LDAPReadDialog () ``{

    if (!Ldap::binded)
    {
	Ldap::LDAPInit ();
	Ldap::ldap_bind_pass = Ldap::LDAPAskAndBind (true);
	if (Ldap::ldap_bind_pass == nil)
	    return `skip;
	Ldap::binded = true;
	Ldap::ReadConfigModules ();
	Ldap::ReadTemplates ();
    }
    else
    {
	if (Ldap::ldap_modified && UI::YesNoPopup (
// yes/no popup
_("Re-read settings from server?
All changes will be lost.")))
	{
	    if (Ldap::modified)
	    {
		//server or bind dn could have been changed!
		Ldap::LDAPInit ();
		Ldap::ldap_bind_pass = Ldap::LDAPAskAndBind (true);
		if (Ldap::ldap_bind_pass == nil)
		    return `skip;
	    }
	    Ldap::ReadConfigModules ();
	    Ldap::ReadTemplates ();
	    Ldap::ldap_modified = false;
	    Ldap::groups_dn = [];
	}
    }

    return `next;
}

// comment
global define string get_cn (string dn) ``{

    list dn_list = splitstring (dn, ",");
    return substring (dn_list[0]:"", find (dn_list[0]:"", "=")+1);
}

// comment
global define string get_dn (string cn) ``{

    return sformat ("cn=%1,%2", cn, Ldap::base_config_dn);
}

// comment
global define string get_rdn (string dn) ``{

    list dn_list = splitstring (dn, ",");
    return dn_list[0]:dn;
}

// get string value of attribute from map
global define string get_string (map object, string attr) ``{

    if (is (object [attr]:"", list))
	return object [attr,0]:"";
    return object [attr]:"";
}

// save edited value to map's attribute
global define map save_value (map object, string attr, string values) ``{

    if (Ldap::SingleValued (attr))
	object [attr] = value;
    else
	// FIXME what if value contains ","?
	object [attr] = splitstring (value, ",");
    return object;
}

// for debug only, TODO remove
global define void debug (any object) ``{

    y2internal ("----------------------------------");
    if (is (object, list))
	foreach (`it, object, ``{ y2internal ("item: %1", it);});
    else if (is (object, map))
	foreach (`k, `v, object, ``{
	    y2internal ("key: %1", k);
	    y2warning ("value: %1",v);
	});
    else
	y2internal ("%1", object);
    y2warning ("----------------------------------");
}

/**
 */
global define symbol ModuleConfigurationDialog () ``{

    //--------------
    define list create_attrs_items (string cn) ``{

	list attrs_items = [];

	foreach (`attr, `value, modules[ get_dn(cn) ]:$[], ``{
	    any val = value;
	    if (contains (["objectClass", "modified", "old_dn"], attr))
		return;
	    if (is (value, list))
	    {
		if (Ldap::SingleValued (attr))
		    val = value[0]:"";
		else
		    val = mergestring (value, ",");
	    }
	    attrs_items = add (attrs_items, `item(`id(attr), attr, val));
	});

	return attrs_items;
    }

    //--------------
    define void replace_module_names () ``{

	list modules_items = []; // list of module names
	foreach (`cn, names, ``{
	    if (cn == current_cn)
		modules_items = add (modules_items, `item(`id(cn), cn, true));
	    else
		modules_items = add (modules_items, `item(`id(cn), cn));
	});
	UI::ReplaceWidget (`id(`rp),
	    `Left(`ComboBox (`id (`modules), `opt (`notify),
		// combobox label
		_("Configuration &Module"), modules_items)));
	boolean ena = names != [];
	UI::ChangeWidget (`id(`delete), `Enabled, ena);
	UI::ChangeWidget (`id(`templ), `Enabled, ena);
	UI::ChangeWidget (`id(`edit), `Enabled, ena);
	UI::ChangeWidget (`id(`modules), `Enabled, ena);
    }


    string help_text = _("FIXME!") +

    _("<p>Clicking on <b>Next</b> button gets you to Template Configuration Dialog.
</p>");

    string current_dn = Ldap::current_module_dn;

    map  modules_attrs_items = $[]; // map of list, indexed by cn

    map modules = Ldap::GetConfigModules ();
    map templates = Ldap::GetTemplates ();
    list names = [];
// TODO edit only RDN?
    list templates_dns = maplist (`dn, `t, templates, ``{ return dn;});


    foreach (`dn, `mod, modules, ``{
	string cn = get_string (mod, "cn");
	if (cn == "")
	    return;
	names = add (names, cn);
	// attributes for table
	modules_attrs_items [cn] = create_attrs_items (cn);
	if (current_dn == "")
	    current_dn = dn;
    });
    string current_cn = get_cn (current_dn);
//TODO list or string?
    string current_template_dn = get_string (modules [current_dn]:$[], "defaultTemplate");

    term contents = `HBox(`HSpacing (1.5), `VBox(
        `VSpacing(0.5),
	`HBox (
	    `ReplacePoint (`id(`rp), `Empty()),
	    `VBox (
		`Label (""), `PushButton (`id (`new), _("Ne&w"))),
	    `VBox (
		`Label (""), `PushButton (`id (`delete), _("&Delete")))
	),
        `VSpacing(0.5),
	`Table(`id(`table), `opt(`notify), `header(
	    // table header 1/2
	    _("Attribute"),
	    // table header 2/2
	    _("Value")),
	    modules_attrs_items[current_cn]:[]),
        `HBox (
            `PushButton(`id(`edit), `opt(`key_F4), EditButtonLabel()),
            `HStretch(),
	    // button label
            `PushButton(`id(`templ), `opt(`key_F7), _("Configure &Template"))
	),
	`VSpacing (0.5)
	),
	`HSpacing (1.5));

    // dialog label
    Wizard::SetContentsButtons(_("Module Configuration"),
            contents, help_text, BackButtonLabel(), NextButtonLabel());

    if (size (modules_attrs_items[current_cn]:[]) > 0)
    {
	UI::SetFocus (`id(`table));
    }
    replace_module_names ();

    any result = nil;
    while (true)
    {
	result = UI::UserInput ();
	string attr	= UI::QueryWidget (`id(`table), `CurrentItem);

	// change the focus to new module
	if (result == `modules)
	{
	    current_cn = UI::QueryWidget (`id(`modules), `Value);
	    current_dn = get_dn (current_cn);
//TODO list or string?
	    current_template_dn = get_string (modules [current_dn]:$[], "defaultTemplate");
	    UI::ChangeWidget (`id(`table), `Items,
		modules_attrs_items[current_cn]:[]);
	}
	// delete the module
	if (result == `delete)
	{
	    // yes/no popup, %1 is name
	    if (!UI::YesNoPopup (sformat (_("Are you sure to delete module \"%1\"?"), current_cn)))
		continue;
	    modules_attrs_items = remove (modules_attrs_items, current_cn);
	    if (modules [current_dn, "modified"]:"" != "added")
	    {
		modules [current_dn, "modified"] = "deleted";
		// TODO what if it was renamed?
	    }
	    names = filter (`n, names, ``(n != current_cn));
	    current_cn = names [0]:"";
	    current_dn = get_dn (current_cn);
	    replace_module_names ();
	    UI::ChangeWidget (`id(`table), `Items,
		modules_attrs_items[current_cn]:[]);
	}
	// new module
	if (result == `new)
	{
	    // offer list of free classes TODO some function...
	    list available = [ "userConfiguration", "groupConfiguration" ];
	    foreach (`dn, `mod, modules, ``{
		if (mod["modified"]:"" == "deleted")
		    return;
		foreach (`cl, mod["objectClass"]:[], ``{
		    available = filter (`c, available, ``(c != cl));
		});
	    });
	    if (available == [])
	    {
		// message
		UI::MessagePopup (_("You currently have configuration modules
of each type, so you cannot add new one."));
		continue;
	    }
	    // get new name and class
	    map new = NewModulePopup (available, names);
	    string cn = new ["cn"]:"";
	    if (cn == "")
		continue;
	    current_cn = cn;
	    current_dn = get_dn (current_cn);
	    modules [current_dn] = Ldap::CreateModule (cn, new ["class"]:"");
	    names = add (names, cn);
	    modules_attrs_items [cn] = create_attrs_items (cn);
	    replace_module_names ();
	    UI::ChangeWidget (`id(`table), `Items,
		modules_attrs_items[current_cn]:[]);
	}
	// module attribute modification
	if ((result == `edit || result == `table) && attr != "defaultTemplate")
	{
debug (modules[current_dn]:$[]);
	    term item		= UI::QueryWidget (`id(`table), `Item(attr));
	    string value	= select (item, 2, "");
	    list conflicts	= [];
	    if (attr == "cn")
		conflicts = names;
	    // edit selected attribute
	    value = EditAttributePopup (attr, value, conflicts);
	    if (value == select (item, 2, "")) //nothing changed
		continue;
	    UI::ChangeWidget (`id(`table), `Item (attr, 1), value);
//	    modules [current_dn, attr] = value;
	    modules [current_dn] = save_value (
		modules [current_dn]:$[], attr, value);
	    modules_attrs_items [current_cn] = create_attrs_items (current_cn);
	    if (attr == "cn")
	    {
		modules_attrs_items[value] = modules_attrs_items[current_cn]:[];
		modules_attrs_items = remove (modules_attrs_items, current_cn);
		if (modules [current_dn, "modified"]:"" != "added")
		{
		    modules [current_dn, "modified"] = "renamed";
		    modules [current_dn, "old_dn"] = current_dn;
		}
		modules [ get_dn (value) ] = modules [current_dn]:$[];
		modules = remove (modules, current_dn);
		names = filter (`n, names, ``(n != current_cn));
		names = add (names, value);
		current_cn = value;
		current_dn = get_dn (value);
		replace_module_names ();
	    }
	}
	// module "defaultTemplate" attribute modification
	if ((result == `edit || result == `table) && attr == "defaultTemplate")
	{
debug (modules[current_dn]:$[]);
	    term item		= UI::QueryWidget (`id(`table), `Item(attr));
	    string value	= select (item, 2, "");
	    map templ		= EditTemplatePopup (value, templates_dns);
	    value		= templ["value"]:value;
	    if (value == select (item, 2, ""))
		continue;
	    if (templ["action"]:"select" == "select")
	    {
		UI::ChangeWidget (`id(`table), `Item (attr, 1), value);
		//modules [current_dn, attr] = value;
		modules [current_dn] = save_value (
		    modules [current_dn]:$[], attr, value);
		modules_attrs_items[current_cn]= create_attrs_items(current_cn);
	    }
	    if (templ["action"]:"select" == "new")
	    {
		// TODO 1. check for potential existence
		// 2. change the value in table and modules
		UI::ChangeWidget (`id(`table), `Item (attr, 1), value);
//		modules [current_dn, attr] = value;
		modules [current_dn] = save_value (
		    modules [current_dn]:$[], attr, value);
		modules_attrs_items[current_cn]= create_attrs_items(current_cn);

		// 3. create new object? -> before "configure template"
	    }
	    if (templ["action"]:"select" == "rename")
	    {
		// TODO 1. check for potential existence
		// 2. change the value in table and modules
		UI::ChangeWidget (`id(`table), `Item (attr, 1), value);
//		modules [current_dn, attr] = value;
		modules [current_dn] = save_value (
		    modules [current_dn]:$[], attr, value);
		modules_attrs_items[current_cn]= create_attrs_items(current_cn);

		// 3. rename object now?
		templates [value] = templates [current_template_dn]:$[];
		templates = remove (templates, current_template_dn);
		if (templates [value, "modified"]:"" != "added")
		{
		    templates [value, "modified"] = "renamed";
		    templates [value, "old_dn"] = current_template_dn;
		}
		templates [value, "cn"] = get_cn (value);
		templates_dns = filter (`dn, templates_dns, ``(
		    dn != current_template_dn));
		templates_dns = add (templates_dns, value);
	    }
	    current_template_dn = value;
	}
	if (result == `templ)
	{
	    term item = UI::QueryWidget (`id(`table), `Item("defaultTemplate"));
	    if (select (item, 2, "") == "")
	    {
		// message, do not translate \"defaultTemplate\"
		UI::MessagePopup (_("Please set the value of \"defaultTemplate\" attribute first."));
		continue;
	    }
	    Ldap::current_template_dn = current_template_dn;
	    Ldap::current_module_dn = current_dn;
	    map template = templates [current_template_dn]:$[];
	    // if doesn't exist, create new:
	    if (template == $[])
	    {
		template = Ldap::CreateTemplate (get_cn (current_template_dn),
		    modules [current_cn, "objectClass"]:[]);
		templates_dns = add (templates_dns, current_template_dn);
	    }
	    templates [current_template_dn] = TemplateConfigurationDialog (
		template);
	}
	if (result == `next)
	{
	    Ldap::current_module_dn = current_dn;
	    // save the edited values to global map...
	    Ldap::CommitConfigModules (modules);
	    // commit templates here!
	    Ldap::CommitTemplates (templates);
	    break;
	}
	if (contains ([`back, `cancel, `abort], result))
	    break;
    }

    return result;
}

/**
 * Dialog for configuration one object template
 */
global define map TemplateConfigurationDialog (map template) ``{

    string help_text = _("FIXME!") +

_("<p>Editing the <b>secondaryGroup</b> attribute is a bit tricky...</p>");

    //TODO FIXME anyway, attributes have to be tested against schema

    string current_template_dn = Ldap::current_template_dn;

    list table_items = [];
    foreach (`attr, `value, template, ``{
	any val = value;
	if (contains (["defaultValue", "default_values", "objectClass",
	"modified", "old_dn", "cn"], attr))
	    return;
	if (is (value, list)) //always is list!
	{
	    if (Ldap::SingleValued (attr))
		val = value[0]:"";
	    else if (attr == "secondaryGroup")
		val = mergestring (value, " ");
	    else
		val = mergestring (value, ",");
	}
	table_items = add (table_items, `item (`id(attr), attr, val));
    });

    list default_items = [];
    map default_values = template["default_values"]:$[];
    foreach (`attr, `value, default_values, ``{
	default_items = add (default_items, `item (`id(attr), attr, value));
    });

    term contents = `HBox(`HSpacing (1.5), `VBox(
        `VSpacing(0.5),
	`Table(`id(`table), `opt(`notify), `header(
	    // table header 1/2
	    _("Attribute"),
	    // table header 2/2
	    _("Value")),
	    table_items),
        `HBox (
            `PushButton(`id(`edit), `opt(`key_F4), EditButtonLabel()),
	    `HStretch()
	),
	// label (table folows)
	`Left(`Label (_("Default Values for New Objects"))),
	`Table(`id(`defaults), `opt(`notify), `header(
	    // table header 1/2
	    _("Attribute of Object"),
	    // table header 2/2
	    _("Default Value")),
	    default_items),
        `HBox (
            `PushButton(`id(`add_dfl), `opt(`key_F3), AddButtonLabel()),
            `PushButton(`id(`edit_dfl), `opt(`key_F4), EditButtonLabel()),
            `PushButton(`id(`delete_dfl), `opt(`key_F5), DeleteButtonLabel()),
            `HStretch()
	),
	`VSpacing (0.5)
	),
	`HSpacing (1.5));

    Wizard::OpenNextBackDialog ();
    // dialog label
    Wizard::SetContentsButtons(_("Object Template Configuration"),
            contents, help_text, BackButtonLabel(), OKButtonLabel());
    Wizard::ReplaceAbortButton (`Empty());

    if (size (table_items) > 0)
    {
	UI::SetFocus (`id(`table));
    }
    any result = nil;
    while (true)
    {
	result		= UI::UserInput ();
	string attr	= UI::QueryWidget (`id(`table), `CurrentItem);

	// edit attribute
	if ((result == `edit || result == `table) && attr != "secondaryGroup")
	{
debug (template);
	    term item		= UI::QueryWidget (`id(`table), `Item(attr));
	    string value	= select (item, 2, "");
	    value = EditAttributePopup (attr, value, []);
	    if (value == template[attr]:"")
		continue;
	    UI::ChangeWidget (`id(`table), `Item (attr, 1), value);
	    template = save_value (template, attr, value);
	}
	// edit "secondaryGroup" attribute
	if ((result == `edit || result == `table) && attr == "secondaryGroup")
	{
	    term item		= UI::QueryWidget (`id(`table), `Item(attr));
	    string value	= select (item, 2, "");
	    list groups		= Ldap::GetGroupsDN (Ldap::GetDomain());
	    value = EditSecondaryGroupPopup (value, groups);
	    if (value == select (item, 2, ""))
		return;
	    UI::ChangeWidget (`id(`table), `Item (attr, 1), value);
	    template [attr] = splitstring (value, " ");
	}
	// add default value
	if (result == `add_dfl)
	{
	    list conflicts = maplist (`attr, `val, default_values, ``{
		return attr;
	    });
	    list classes = template["defaultObjectClass"]:[];
	    list available = Ldap::GetObjectAttributes (classes);
	    map dfl = AddDefaultValuePopup (available, conflicts);
	    if (dfl["value"]:"" == "")
		continue;
	    string attr = dfl["attr"]:"";
	    default_values [attr] = dfl["value"]:"";
	    default_items = add (default_items,
		`item (`id(attr), attr, dfl["value"]:""));
	    UI::ChangeWidget (`id(`defaults), `Items, default_items);
	}
	// edit default value
	if (result == `edit_dfl || result == `defaults)
	{
	    attr		= UI::QueryWidget (`id(`defaults),`CurrentItem);
	    string value	= default_values [attr]:"";
	    value = EditAttributePopup (attr, value, []);
	    if (value == template[attr]:"")
		continue;
	    UI::ChangeWidget (`id(`defaults), `Item (attr, 1), value);
	    default_values [attr] = value;
	}
	// delete default value
	if (result == `delete_dfl)
	{
	    attr		= UI::QueryWidget (`id(`defaults),`CurrentItem);
	    // yes/no popup, %1 is name
	    if (!UI::YesNoPopup (sformat (_("Are you sure to delete default attribute \"%1\"?"), attr)))
		continue;
	    default_values = remove (default_values, attr);
	    default_items = filter (`it, default_items, ``(
		select (it, 1, "") != attr));
	    UI::ChangeWidget (`id(`defaults), `Items, default_items);
	}
	if (contains ([`back, `cancel, `abort], result))
	    break;
	if (result == `next)
	{
	    template ["default_values"] = default_values;
	    break;
	}
    }
    Wizard::CloseDialog ();
    return template;
}

}//EOF
