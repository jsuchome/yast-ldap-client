/**
 * File:
 *   include/ldap/ui.ycp
 *
 * Package:
 *   Configuration of LDAP
 *
 * Summary:
 *   User interface functions.
 *
 * Authors:
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * All user interface functions.
 *
 */

{
    textdomain "ldap";

    import "Wizard";
    import "Ldapclient";

    include "ui/common_popups.ycp";
    // include "network/dns.ycp";

    /**
     * The only dialog
     * @return	`back or `next
     */
    global define symbol LdapDialog () ``{
	
// help text 1/3
	string help_text = UI(_("<p>Here your machine can be set up as
<b>LDAP client</b> to authenticate your user with an OpenLDAP server.
Enter the name of the search base (base DN, e.g, dc=mydomain,dc=com)
in the first entry and the IP address of the LDAP server (e.g., 10.20.0.2)
in the second.
To deactivate LDAP services, click the button <b>Do not use LDAP</b>.</p>"));

// help text 2/3
	help_text = help_text + UI(_("<p>If you deactivate LDAP, the current
LDAP entry for passwd in /etc/nsswitch.conf will be removed and replaced
with <i>compat</i>. The PAM configuration will be modified and
the LDAP entry removed.</p>"));

// help text 3/3
	help_text = help_text + UI(_("<p>If you activate LDAP, NSS and PAM
will be configured accordingly to use LDAP for user authentification.</p>"));

	boolean start = Ldapclient::start;
	string domain  = Ldapclient::GetDomain ();
	string server = Ldapclient::server;
	boolean old_start = start;
	string old_domain = domain;
	string old_server = server;
	
	term con = `HVSquash(
			     `Frame (_("LDAP client"),
				     `VBox (`VSpacing (0.2),
					    `RadioButtonGroup(`id(`rd),
							      // radio button label
							      `Left(
								    `HVSquash(
									      `VBox (
										     `Left (`RadioButton(`id(`ldapno), `opt (`notify), _("Do &not use LDAP"), !start)),
                                                                                 // radio button label
										     `Left(`RadioButton(`id(`ldapyes), `opt (`notify), _("&Use LDAP"), start)))))),
					    // text entry label
					    `HSquash(`TextEntry (`id (`ldapd), _("LDAP &base DN"), domain)),
					    // text entry label
					    `HSquash(`TextEntry (`id (`ldapa), _("&IP address of the LDAP server"), server)
						     ),
					    `VSpacing (0.2)
					    )
				     )
			     );

	

	Wizard::SetContentsButtons (
	    // dialog title
	    _("LDAP Client Configuration"), con, help_text, 
	    BackButtonLabel (), FinishButtonLabel ());
	
	UI::ChangeWidget (`id (`ldapd), `Enabled, start);
	UI::ChangeWidget (`id (`ldapa), `Enabled, start);

	any result = nil;
	do {
	    result = UI::UserInput ();

	    start = (UI::QueryWidget(`id(`rd), `CurrentButton) == `ldapyes);

	    if (result == `ldapyes || result == `ldapno) {
		UI::ChangeWidget(`id(`ldapd), `Enabled, start);
		UI::ChangeWidget(`id(`ldapa), `Enabled, start);
	    }

	    if (result == `next && start) {
		domain = UI::QueryWidget(`id(`ldapd), `Value);
		server = UI::QueryWidget(`id(`ldapa), `Value);
	    
		if (!checkIP (server))
		{
		    // error popup label
		    Report::Error(_("The IP address is incorrect."));
		    result = nil;
		    continue;
		}
	    }

	    if (result == `next)
	    {
		// if nothing is changed go back.
		if (old_start == start &&
		    old_domain == domain &&
		    old_server == server)
		    result = `back;
		else
		    if (!Ldapclient::auto && ! UI::YesNoPopup(_("The configuration of the LDAP client will be saved\nand the client will be restarted.")))
			result = nil;
	    }

	} while (result != `back && result != `next && result != `cancel);

	if (result == `next)
	{
	    Ldapclient::start = start;
	    Ldapclient::SetDomain (domain);
	    Ldapclient::server = server;
	}

	return result;
    }
}
