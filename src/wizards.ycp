/**
 * File:	include/ldap-client/wizards.ycp
 * Package:	Configuration of ldap-client
 * Summary:	Wizards definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "ldap-client";

import "Wizard";
import "Label";

include "wizard/sequencer.ycp";

include "ldap/ui.ycp";

/**
 * Whole configuration of ldap-client
 * @return sequence result
 */
global define symbol LdapSequence() ``{

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    // label
    string caption = _("Ldap Client Configuration");
    // label
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = WizardSequencer(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of ldap-client but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
global define symbol LdapAutoSequence() ``{

    string caption = _("Ldap Client Configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/**
 * Main workflow of the ldap-client configuration
 * @return sequence result
 */
global define symbol MainSequence() ``{

    map aliases = $[
	"ldap"		: ``( LdapDialog() ),
	"abort"		: ``( ReallyAbort()),
	"advanced"	: ``( AdvancedConfigurationDialog ()),
	"configure"	: ``( ModuleConfigurationDialog ()),
//	"template"	: ``( TemplateConfigurationDialog ()),
	"read_ldap"	: [``(LDAPReadDialog ()), true ],
	"confirm_write"	: ``( WriteConfirmationPopup()),
    ];

    map sequence = $[
	"ws_start"	: "ldap",
	"ldap" : $[
	    `abort	: "abort",
	    `cancel	: "abort",
	    `advanced	: "advanced",
//	    `next	: "confirm_write"
	    `next	: `next
	],
	"abort": $[
	    `abort	: `abort,
	    `next	: `abort,
	    `cancel	: `back,
	    `back	: `back
	],
	"read_ldap": $[
	    `abort	: `abort,
	    `cancel	: `abort,
	    `next	: "configure",
	    `skip	: "ldap"
	],
	"advanced": $[
	    `abort	: "abort",
	    `cancel	: "abort",
	    `next	: "ldap",
	    `configure	: "read_ldap"
	],
	"configure": $[
	    `abort	: "abort",
	    `cancel	: "abort",
	    `next	: "advanced",
//	    `next	: "template",
	],
	/*
	"template": $[
	    `abort	: "abort",
	    `cancel	: "abort",
	    `next	: "configure",
	],
	*/
	"confirm_write": $[
	    `abort	: "abort",
	    `cancel	: `back,
	    `next	: `next
	]
    ];

    any ret = WizardSequencer(aliases, sequence);

    return ret;
}

/* EOF */
}
