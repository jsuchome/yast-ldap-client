/**
 * File:
 *   ldap_client_auto.ycp
 *
 * Package:
 *   Configuration of LDAP client
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Thorsten Kukuk <kukuk@suse.de>
 *   Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of LDAP settings
 * @return map edited settings or an empty map if canceled
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = CallModule ("ldap_auto", [ mm ]);
 */

{
    textdomain "ldap_client";

    import "Ldapclient";
    import "Wizard";
    import "Summary";
    include "ldap_client/ui.ycp";

    Ldapclient::auto = true;
    list args = Args ();
    if ( size (args) <= 0 )
    {
	y2error ("Did not get the settings, probably some mistake...");
	return false;
    }
    if ( !is ( Args (0), map ) )
    {
	y2error ("Bad argument for ldap_client_auto: %1", Args (0));
	return false;
    }
    
    // The settings are in the first argument
    map settings = $[];
    
    {
	integer i = 0;
	while (i < size (Args()))
	{
	    if (is (Args (i), map) && nil != Args (i))	settings = Args (i);	
	    i = i + 1;
	}
    }
      
    y2milestone("Imported: (%1)", settings);

    Ldapclient::Import ( settings );

    define set_contents() ``{	
	term contents =
	    `VBox(
		  `VSpacing(1),
		  `RichText( `id(`summary), Ldapclient::Summary()),
		  `VSpacing(),
		  `HBox(
			`PushButton(`id(`configure), _("&Configure LDAP client")),
			`HStretch(),
			`PushButton(`id(`reset), _("&Reset Configuration"))
			)
				
		  );		
	Wizard::SetContents(_("LDAP Configuration"),	
			    contents, "", true, true);
    }

    set_contents();
    any result = nil;
    any ret = nil;
    repeat {
	ret = UI::UserInput();
	if (ret == `configure)
	{	    
	        Wizard::CreateDialog ();
		Wizard::ReplaceAbortButton(`Empty ());
		result = LdapDialog ();				
		UI::CloseDialog ();
		if (result == `next || result == `finish)
		{
		     settings = Ldapclient::Export ();
		} 
		Ldapclient::Set(settings);
		set_contents();
	}
	else if ( ret == `reset)
	{
	    settings= $[];
	    Ldapclient::Set(settings);
	    set_contents();
	}		
    } until (ret == `back || ret == `next || ret ==`key);   
    return [ret, settings];
}
