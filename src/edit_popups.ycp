/**
 * File:	include/ldap/edit_popups.ycp
 * Package:	Configuration of LDAP
 * Summary:	Additional user interface functions: special edit popups
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Popups for editing the values of LDAP configuration tables.
 */

{

textdomain "ldap-client";

import "Ldap";

/**
 * Generic popup for editing attribute's value
 */
global define string EditAttributePopup (string attr, string value, list conflicts) ``{

// TODO show description of attributes!
    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `HSpacing (50),
	    `VSpacing(0.5),
	    // textentry label
	    `TextEntry (`id (attr), sformat(_("&Value of \"%1\""), attr),value),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default, `key_F10), OKButtonLabel()),
		`PushButton(`id(`cancel), `opt (`key_F9), CancelButtonLabel())
	    ),
	    `VSpacing(0.5)),
	`HSpacing(1)
    ));
    any result = nil;
    string new_value = value;

    UI::SetFocus (`id(attr));
    while (true)
    {
	result = UI::UserInput ();
	if (result == `cancel)
	{
	    new_value = value;
	    break;
	}
	if (result == `ok)
	{
	    // check it?
	    new_value = UI::QueryWidget (`id(attr), `Value);
	    if (new_value != value && contains (conflicts, new_value))
	    {
		//error popup
		UI::ErrorPopup (_("The entered value already exists.
Please select another one."));
		continue;
	    }
	    break;
	}
    }
    UI::CloseDialog();
    return new_value;
}

/**
 * Popup for adding new configuration module
 */
global define map NewModulePopup (list available, list conflicts) ``{

    // label
    term r_buttons = `VBox( `Left(`Label (_("Object Class of New Module"))));
    foreach (`class, available, ``{
	r_buttons = add (r_buttons, `Left(`RadioButton (`id(class), class, true)));
    });
    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `HSpacing (50),
	    `VSpacing(0.5),
	    `RadioButtonGroup (`id(`rb), r_buttons),
	    `VSpacing(0.5),
	    // textentry label, do not translate "cn"
	    `TextEntry (`id (`cn), _("&Name of New Module (\"cn\" value)")),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default, `key_F10), OKButtonLabel()),
		`PushButton(`id(`cancel), `opt (`key_F9), CancelButtonLabel())
	    ),
	    `VSpacing(0.5)),
	`HSpacing(1)
    ));
    any result = nil;
    string new_value = "";
    string class = "";

    UI::SetFocus (`id(`cn));
    while (true)
    {
	result = UI::UserInput ();
	if (result == `cancel)
	{
	    new_value = "";
	    break;
	}
	if (result == `ok)
	{
	    new_value = UI::QueryWidget (`id(`cn), `Value);
	    if (contains (conflicts, new_value))
	    {
		//error popup
		UI::ErrorPopup (_("The entered value already exists.
Please select another one."));
		continue;
	    }
	    class = UI::QueryWidget (`id(`rb), `CurrentButton);
	    break;
	}
    }
    UI::CloseDialog();
    return $[ "class": class, "cn": new_value ];
}

global define string EditSecondaryGroupPopup (string value, list all_groups) ``{

    list current_groups = splitstring (value, " ");
    list items = maplist (`group, current_groups, ``{
	return `item(`id(group), group, true );
    });
    foreach (`group, all_groups, ``{
	if (!contains (current_groups, group))
	    items = add (items, `item(`id(group), group, false));
    });

    UI::OpenDialog( `opt(`decorated), `HBox(
	`VSpacing (15),
	`HSpacing(1),
	`VBox(
	    `HSpacing (50),
	    `VSpacing(0.5),
	    // selection box label
	    `MultiSelectionBox (`id (`groups), _("Default &Secondary Groups"),
		items),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default, `key_F10), OKButtonLabel()),
		`PushButton(`id(`cancel), `opt (`key_F9), CancelButtonLabel())
	    ),
	    `VSpacing(0.5)),
	`HSpacing(1)
    ));
    any result = nil;
    string new_value = "";

    while (true)
    {
	result = UI::UserInput ();
	if (result == `cancel)
	{
	    new_value = "";
	    break;
	}
	if (result == `ok)
	{
	    list new_groups = UI::QueryWidget (`id(`groups), `SelectedItems);
	    new_value = mergestring (new_groups, " ");
	    break;
	}
    }
    UI::CloseDialog();
    return new_value;
}


/**
 * Popup for editing default template value
 */
global define map EditTemplatePopup (string value, list all) ``{

    list items = maplist (`dn, all, ``{
	if (dn == value)
	    return `item (`id(dn), dn, true);
	else
	    return `item (`id(dn), dn);
    });
    UI::OpenDialog( `opt(`decorated), `HBox(
	`VSpacing (15),
	`HSpacing(1),
	`VBox(
	    `HSpacing (70),
	    `VSpacing(0.5),
	    // label FIXME
	    `Label (_("What do you want to do?")),
	    `VSpacing(0.5),
	    // richtext text
	    `RichText (_("You can select template DN from existing ones and this will be used as a value of \"defaultTemplate\".
<br>
You can add a new value of DN or edit an existing one to create new template with such DN. Push <b>OK</b> button to confirm.
<br>
Or you can rename current DN to new value after clicking <b>Rename</b>.
")),
	    // TODO use radio-buttons?
	    // combobox label FIXME
	    `ComboBox (`id (attr),`opt (`editable), _("&Select") , items),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default, `key_F10), OKButtonLabel()),
	    // TODO button for removal?
		`PushButton(`id(`rename),`opt(`key_F6), _("&Rename/Move")),
		`PushButton(`id(`cancel), `opt (`key_F9), CancelButtonLabel())
	    ),
	    `VSpacing(0.5)),
	`HSpacing(1)
    ));

    any result = nil;
    string new_value = value;
    string action = "select";
    if (value == "")
	UI::ChangeWidget (`id(`rename), `Enabled, false);
    while (true)
    {
	result = UI::UserInput ();
	if (result == `cancel)
	{
	    new_value = value;
	    action = "select";
	    break;
	}
	if (result == `ok)
	{
	    new_value = UI::QueryWidget (`id(attr), `Value);
	    action = "new";
	    if (contains (all, new_value))
		action = "select";
	    break;
	}
	if (result == `rename)
	{
	    new_value = UI::QueryWidget (`id(attr), `Value);
	    action = "rename";
	    if (contains (all, new_value))
		action = "select";
	    break;
	}
    }
    UI::CloseDialog();
    return $[ "action": action, "value": new_value];
}

global define map AddDefaultValuePopup (list available, list conflicts) ``{

    available = filter (`attr, available, ``( !contains (conflicts, attr)));
    if (available == [])
	//TODO warning
	return $[];

    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `HSpacing (50),
	    `VSpacing(0.5),
	    // combobox label
	    `Left(`ComboBox (`id (`attr), _("Attribute &Name"), available)),
	    `VSpacing(0.5),
	    // textentry label
	    `TextEntry (`id (`val), _("Attribute &Value")),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default, `key_F10), OKButtonLabel()),
		`PushButton(`id(`cancel), `opt (`key_F9), CancelButtonLabel())
	    ),
	    `VSpacing(0.5)),
	`HSpacing(1)
    ));
    any result = nil;
    string new_value = "";
    string attr = "";

    UI::SetFocus (`id(`attr));
    while (true)
    {
	result = UI::UserInput ();
	if (result == `cancel)
	{
	    new_value = "";
	    break;
	}
	if (result == `ok)
	{
	    attr	= UI::QueryWidget (`id(`attr), `Value);
	    new_value	= UI::QueryWidget (`id(`val), `Value);
	    break;
	}
    }
    UI::CloseDialog();
    return $[ "attr": attr, "value": new_value ];
}

}//EOF
