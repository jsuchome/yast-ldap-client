/**
 * File:	include/ldap/edit_popups.ycp
 * Package:	Configuration of LDAP
 * Summary:	Additional user interface functions: special edit popups
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Popups for editing the values of LDAP configuration tables.
 */

{

textdomain "ldap-client";

import "Ldap";
import "Label";
import "Popup";

/**
 * Generic popup for editing attribute's value
 * TODO comment
 */
global define list EditAttributePopup (string attr, list value, list conflicts, boolean single, list offer) ``{

    /**
     * Helper for creating items for EditAttribute Popup
     */
    define term generate_value_list () ``{
	term ret = `VBox();
	if (single)
	{
	    ret = add (ret, `TextEntry (`id (0),
		// textentry label
		sformat(_("&Value of \"%1\" attribute"), attr), value[0]:""));
	}
	else
	{
	    ret = add (ret, `TextEntry (`id (0),
		// textentry label
		sformat(_("&Values of \"%1\" attribute"), attr), value[0]:""));
	    integer i = 1;
	    while (i < value_size)
	    {
		ret = add (ret, `TextEntry (`id (i), "", value[i]:""));
		if (size (value[i]:"" + 10) > hsize)
		    hsize = size (value[i]:"") + 10;
		i = i + 1;
	    }
	}
	return ret;
    }

    // help text
    string help_text = _("hilfe!");

    list org_value = value;
    integer value_size = size (value);

    // horizontal size of popup for
    integer hsize = size (value[0]:"") + 10;
    term values = generate_value_list ();
    // button label
    term add_button = `PushButton(`id(`new), `opt (`key_F3), _("&Add Value"));

    if (size (offer) > 0)
    {
	list mb = [ `item(`id(`new), _("&Empty entry")) ];
	foreach (`item, offer, ``{
	    mb = add (mb, `item(`id(item), item));
	});
	add_button = `MenuButton(`id(`mb), `opt (`key_F3), _("&Add Value"),mb);
    }

    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `HSpacing (hsize > 50 ? hsize : 50),
	    `ReplacePoint (`id(`rp), values),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default,`key_F10),Label::OKButton()),
		`PushButton(`id(`cancel),`opt (`key_F9), Label::CancelButton()),
		`PushButton(`id(`help),`opt (`key_F2), Label::HelpButton()),
		(single)? `Empty() :
		add_button
	    )
	),
	`HSpacing(1)
    ));
    any result = nil;
    list new_value = [];

    if (value_size == 0)
	value_size = 1;
    UI::SetFocus (`id(value_size-1));
    while (true)
    {
	result = UI::UserInput ();
	if (result == `cancel)
	{
	    new_value = org_value;
	    break;
	}
	if ( result == `help )
	{
	    Wizard::ShowHelp( help_text );
	}
	if ((result == `new) || (contains (offer, result)))
	{
	    integer j = 0;
	    value = [];
	    while (j < value_size)
	    {
		value = add (value, UI::QueryWidget (`id(j), `Value) );
		j = j + 1;
	    }
	    if (contains (offer, result) && value[value_size-1]:"" == "")
	    {
		// relace last empty entry
		value [value_size-1] = result;
	    }
	    else
	    {
		// add new entry
		value = add (value, (result == `new)? "" : result);
		value_size = value_size + 1;
	    }
	    UI::ReplaceWidget (`id(`rp), generate_value_list ());
	    UI::SetFocus (`id(value_size-1));
	}
	if (result == `ok)
	{
	    integer j = 0;
	    boolean duplicate = false;
	    new_value = [];
	    while (j < value_size && !duplicate)
	    {
		string v = UI::QueryWidget (`id(j), `Value);
		if (!contains (org_value, v) && contains (conflicts, v))
		{
		    //error popup
		    Popup::Error (sformat (_("The value \'%1\' already exists.
Please select another one."), v));
		    duplicate = true;
		}
		if (v != "") new_value = add (new_value, v);
		j = j + 1;
	    }
	    if (duplicate) continue;
	    break;
	}
    }
    UI::CloseDialog();
    return new_value;
}

/**
 * Popup for adding new configuration module
 */
global define map NewModulePopup (list available, list conflicts) ``{

    // help text
    string help_text = _("hilfe!");

    map descriptions = $[
	// description of configuration object
	"userConfiguration": _("Configuration of user management tools"),
	// description of configuration object
	"groupConfiguration": _("Configuration of group management tools"),
    ];
    // label
    term r_buttons = `VBox( `Left(`Label (_("Object Class of New Module"))));
    foreach (`class, available, ``{
	string desc = class;
	if (descriptions [class]:"" != "")
	    desc = sformat ("%1 (%2)", class, descriptions [class]:"");
	r_buttons = add (r_buttons,`Left(`RadioButton (`id(class), desc,true)));
    });
    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `HSpacing (50),
	    `RadioButtonGroup (`id(`rb), r_buttons),
	    // textentry label, do not translate "cn"
	    `TextEntry (`id (`cn), _("&Name of New Module (\"cn\" value)")),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default,`key_F10),Label::OKButton()),
		`PushButton(`id(`cancel),`opt (`key_F9), Label::CancelButton()),
		`PushButton(`id(`help),`opt (`key_F2), Label::HelpButton())
	    )
	),
	`HSpacing(1)
    ));
    any result = nil;
    string new_value = "";
    string class = "";

    UI::SetFocus (`id(`cn));
    while (true)
    {
	result = UI::UserInput ();
	if (result == `cancel)
	{
	    new_value = "";
	    break;
	}
	if ( result == `help )
	{
	    Wizard::ShowHelp( help_text );
	}
	if (result == `ok)
	{
	    new_value = UI::QueryWidget (`id(`cn), `Value);
	    if (contains (conflicts, new_value))
	    {
		//error popup
		Popup::Error (_("The entered value already exists.
Please select another one."));
		continue;
	    }
	    class = UI::QueryWidget (`id(`rb), `CurrentButton);
	    break;
	}
    }
    UI::CloseDialog();
    return $[ "class": class, "cn": new_value ];
}

/**
 * Popup for adding new default value (default value is template's attribute)
 */
global define map AddDefaultValuePopup (list available, list conflicts) ``{

    // help text
    string help_text = _("hilfe!");

    available = filter (`attr, available, ``( !contains (conflicts, attr)));
    /*
    if (available == [])
	//TODO warning
	return $[];
    */

    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `HSpacing (50),
	    `VSpacing(0.5),
	    // combobox label
	    `Left(`ComboBox (`id (`attr),`opt(`editable), _("Attribute &Name"),
		available)),
	    `VSpacing(0.5),
	    // textentry label
	    `TextEntry (`id (`val), _("Attribute &Value")),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default,`key_F10),Label::OKButton()),
		`PushButton(`id(`cancel), `opt(`key_F9), Label::CancelButton()),
		`PushButton(`id(`help),`opt (`key_F2), Label::HelpButton())
	    ),
	    `VSpacing(0.5)),
	`HSpacing(1)
    ));
    any result = nil;
    string new_value = "";
    string attr = "";

    UI::SetFocus (`id(`attr));
    while (true)
    {
	result = UI::UserInput ();
	if (result == `cancel)
	{
	    new_value = "";
	    break;
	}
	if ( result == `help )
	{
	    Wizard::ShowHelp( help_text );
	}
	if (result == `ok)
	{
	    attr	= UI::QueryWidget (`id(`attr), `Value);
	    new_value	= UI::QueryWidget (`id(`val), `Value);
	    break;
	}
    }
    UI::CloseDialog();
    return $[ "attr": attr, "value": new_value ];
}

}//EOF
