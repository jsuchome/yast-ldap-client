/**
 * File:	modules/Ldap.ycp
 * Module:	Configuration of LDAP client
 * Summary:	LDAP client configuration data, I/O functions.
 * Authors:	Thorsten Kukuk <kukuk@suse.de>
 *		Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

    module "Ldap";
    textdomain "ldap-client";

    import "Runlevel";
    import "Report";
    import "Summary";


    /**
     * Write only, used during autoinstallation.
     * Don't run services and SuSEconfig, it's all done at one place.
     */
    global boolean write_only = false;

    /**
     * Should ypbind be started at boot?
     * If not, other settings are not touched.
     */
    global boolean start = false;

    /**
     * IP addresses of LDAP server.
     */
    global string  server = "";

    // anything modified?
    global boolean modified = false;

    string domain = "";
    string old_domain = nil;
    boolean domain_changed = false;

    /* Do we have an v2 or v3 ldap server? */
    global boolean ldap_v2 = false;
    global boolean ldap_tls = false;

    /* Which crypt method should be used? If not set, use crypt. */
    // TODO make it configurable
    global string pam_password = "";

    /**
     * If home directories of LDAP users are stored on this machine
     */
    global boolean file_server = false;

    /* variables for LDAP user configuration*/
    // TODO: store it in LDAP
    global string user_base = "";
    global string group_base = "";
    global string user_filter = "";
    global string group_filter = "";
    global string user_class = "";
    global string group_class = "";
    global string bind_dn = "";

    // default (and shadow) settings for new LDAP users
    // TODO: store it in LDAP
    global string default_home = "/home";
    global string default_shell = "/bin/bash";
    global string default_skel = "/etc/skel";
    global string default_groupname = "users";
    global string default_inactive = "-1";
    global string default_expire = "";
    global integer default_gid = 100; // TODO change to 500 with new version


    /* stored values of /etc/nsswitch.conf */
    map nsswitch = $[ "passwd" : [], "group": []];

    /**
     * If the domain has changed from a nonempty one, it may only be
     * changed at boot time. Use this to warn the user.
     * @return whether changed by SetDomain
     */
    global define boolean DomainChanged () ``{
	return domain_changed;
    }

    /**
     * @return Get the LDAP domain.
     */
    global define string GetDomain () ``{
	return domain;
    }

    /**
     * Set the LDAP domain.
     * @param new_domain a new domain
     */
    global define void SetDomain (string new_domain) ``{
	domain = new_domain;
	if (domain != old_domain && old_domain != "")
	{
	    domain_changed = true;
	}
    }

    /* ---------------------------------------------------------------- */

    /**
     * Get all the LDAP configuration from a map.
     * When called by ldap_auto (preparing autoinstallation data)
     * the map may be empty.
     * @param settings	$["start": "domain": "servers":[...] ]
     * @return	success
     */
    global define boolean Import (map settings) ``{
	if (size (settings) == 0)
	{
	    //Provide defaults for autoinstallation editing:
	    //Leave empty.
	    old_domain = domain;
	    return true;
	}

	boolean missing = false;
	foreach (`k, ["start_ldap", "ldap_domain", "ldap_server", "ldap_v2", "ldap_tls"], ``{
	    if (! haskey (settings, k))
	    {
		y2error ("Missing at Import: '%1'.", k);
		missing = true;
	    }
	});
	if (missing)
	{
	    return false;
	}

	start = lookup (settings, "start_ldap", false);
	server = lookup (settings, "ldap_server", "");
	domain = lookup (settings, "ldap_domain", "");
	ldap_v2 = lookup (settings, "ldap_v2", false);
	ldap_tls = lookup (settings, "ldap_tls", false);
	pam_password = lookup (settings, "pam_password", "crypt");
	old_domain = domain;
	return true;
    }

    /**
     * Only set variables, without checking anything
     * @return: void
     */
    global define void Set(map settings)  ``{
	start = lookup (settings, "start_ldap", false);
	server = lookup (settings, "ldap_server", "");
	domain = lookup (settings, "ldap_domain", "");
	ldap_v2 = lookup (settings, "ldap_v2", false);
	ldap_tls = lookup (settings, "ldap_tls", false);
	pam_password = lookup (settings, "pam_password", "crypt");
	return;
    }

    /**
     * Dump the LDAP settings to a map, for autoinstallation use.
     * @return $["start":, "servers":[...], "domain":]
     */
    global define map Export () ``{
	return $[
	    "start_ldap": start,
	    "ldap_server": server,
	    "ldap_domain": domain,
	    "ldap_v2": ldap_v2,
	    "ldap_tls": ldap_tls,
	    "pam_password": pam_password,
	    ];
    }

    /**
     * Read single entry from /etc/openldap/ldap.conf file
     * @param entry entry name
     * @param defvalue default value if entry is not present
     * @return entry value
     */
    define string ReadLdapConfEntry (string entry, string defvalue) ``{

	string ret = SCR::Read(add (.etc.openldap.ldap_conf, entry));
	if (ret == nil)
	    ret = defvalue;
	return ret;
    }

    /**
     * Reads LDAP settings from the SCR
     * @return success
     */
    global define boolean Read () ``{

	start = (SCR::Execute (.target.bash, "/usr/bin/grep '^passwd:.*ldap' /etc/nsswitch.conf") == 0);
	server = ReadLdapConfEntry ("host", "");
	domain  = ReadLdapConfEntry ("base", "");
	old_domain = domain;

	ldap_v2 = (ReadLdapConfEntry ("ldap_version", "3") == "2");
	ldap_tls = (ReadLdapConfEntry ("ssl", "no") == "start_tls");

        bind_dn = ReadLdapConfEntry ("binddn", "");

	// TODO: usere/group base should be stored in LDAP also?
        user_base = ReadLdapConfEntry ("nss_base_passwd", domain);
        group_base = ReadLdapConfEntry ("nss_base_group", user_base);

	// TODO read these from somewhere!-----------------------------
	user_filter = "objectclass=person";
	user_class = "person,posixAccount,top,shadowAccount,inetOrgPerson";

	group_filter = "objectClass=posixGroup";
	group_class = "posixGroup,top";

	file_server = false;
	// ------------------------------------------------------------

	pam_password = ReadLdapConfEntry ("pam_password", "crypt");
	/* else plain text is used, bad idea.  */

	nsswitch["passwd"] = splitstring
	    (SCR::Read(.etc.nsswitch_conf.passwd)," ");
	nsswitch["group"] = splitstring
	    (SCR::Read(.etc.nsswitch_conf.group), " ");

	return true;
    }


    /**
     * Saves LDAP configuration.
     * (No parameters because it is too short to abort)
     * @return true on success
     */
    global define boolean Write () ``{

	boolean ypbind_running = false;

	if (!write_only)
	{
	    ypbind_running = (Runlevel::ServiceStatus ("ypbind") == 0);
		Runlevel::RunInitScript ("ypbind", "stop");
	}
	map new_nsswitch = $[ "passwd":"", "group": ""];

	if (start) // ldap used
	{
	    // update ldap.conf
	    SCR::Write(.etc.openldap.ldap_conf.host, server);
	    SCR::Write(.etc.openldap.ldap_conf.base, domain);
	    if (ldap_v2)
		SCR::Write(.etc.openldap.ldap_conf.ldap_version, "2");
	    else
		SCR::Write(.etc.openldap.ldap_conf.ldap_version, "3");

	    if (ldap_tls)
		SCR::Write(.etc.openldap.ldap_conf.ssl, "start_tls");
	    else
		SCR::Write(.etc.openldap.ldap_conf.ssl, "no");

	    // TODO configure password encryption
	    SCR::Write(.etc.openldap.ldap_conf.pam_password, pam_password);

	    if (bind_dn != "")
		SCR::Write (.etc.openldap.ldap_conf.binddn, bind_dn);

	    // TODO when write to ldap.conf?
	    if (user_base != "")
	    {
		SCR::Write(.etc.openldap.ldap_conf.nss_base_passwd, user_base);
		SCR::Write(.etc.openldap.ldap_conf.nss_base_shadow, user_base);
	    }
	    if (group_base != "")
		SCR::Write(.etc.openldap.ldap_conf.nss_base_group, group_base);

	    // write the changes in ldap.conf
	    SCR::Write(.etc.openldap.ldap_conf, nil);

	    // pam settigs
	    SCR::Write(.pam.all.account.pam_unix2, "+use_ldap");
	    SCR::Write(.pam.all.auth.pam_unix2, "+use_ldap");
	    SCR::Write(.pam.all.password.pam_unix2, "+use_ldap");

	    // modify sources in /etc/nsswitch.conf
	    foreach (`entry, `value, nsswitch, ``{
		new_nsswitch [entry] = mergestring ( value, " " );
		if (!contains (value, "ldap"))
		    new_nsswitch [entry] = new_nsswitch [entry]:"" + " ldap";
	    });
	    SCR::Write(.etc.nsswitch_conf.passwd, new_nsswitch["passwd"]:"");
	    SCR::Write(.etc.nsswitch_conf.group, new_nsswitch["group"]:"");
	    SCR::Write(.etc.nsswitch_conf, nil);
	}
	else // ldap is not used
	{

	    foreach (`entry, `value, nsswitch, ``{
		new_nsswitch [entry] = mergestring (
		    filter (`v, value, ``(v != "ldap")), " ");
		// just to make sure that something remains...
		if (new_nsswitch [entry]:"" == "")
		    new_nsswitch [entry] = "files";
	    });

	    SCR::Write(.etc.nsswitch_conf.passwd, new_nsswitch["passwd"]:"");
	    SCR::Write(.etc.nsswitch_conf.group, new_nsswitch["group"]:"");
	    SCR::Write(.etc.nsswitch_conf, nil);

	    SCR::Write(.pam.all.account.pam_unix2, "-use_ldap");
	    SCR::Write(.pam.all.auth.pam_unix2, "-use_ldap");
	    SCR::Write(.pam.all.password.pam_unix2, "-use_ldap");

	    // FIXME what is this for?
	    SCR::Execute(.target.bash, "/bin/cp -a /var/lib/yast2-config-ldap_client/* /etc/pam.d");
	    SCR::Execute(.target.bash, "/bin/rm -rf /var/lib/yast2-config-ldap_client");
	}

	// TODO: save file_server somewhere

	if (Runlevel::ServiceStatus ("nscd") == 0 && !write_only)
	{
	    Runlevel::RunInitScript ("nscd", "restart");
	}

	if (ypbind_running)
	{
	    Runlevel::RunInitScript ("ypbind", "restart");
	}

	return true;
    }

    // ------------------------------------------------------
    // TODO settings to write to LDAP directory (ConfigObject)
    /*
	base_config: dn, scope, (objectclass?)
	user_base
	group_base
	user_filter
	group_filter
	user_object_class
	group_object_class

	default user settings (group, shell, shadow) from template
    */

    /**
     * Read additional/default settings from LDAP?
     *


    */
    // ------------------------------------------------------


    /**
     * Summary()
     * returns html formated configuration summary
     * @return summary
     */

    global define string Summary ()
	``{
	string summary = "";
	summary = Summary::AddHeader(summary, _("LDAP Client enabled"));
	summary = Summary::AddLine(summary, (start) ? "Yes" : Summary::NotConfigured());
	summary = Summary::AddHeader(summary, _("LDAP Domain"));
	summary = Summary::AddLine(summary, (domain != "") ? domain : Summary::NotConfigured());
	summary = Summary::AddHeader(summary, _("LDAP Server"));
	summary = Summary::AddLine(summary,( server!="") ? server : Summary::NotConfigured());
	summary = Summary::AddHeader(summary, _("LDAP Version 2"));
	summary = Summary::AddLine(summary, (ldap_v2) ? "Yes" : Summary::NotConfigured());
	summary = Summary::AddHeader(summary, _("LDAP &TLS/SSL"));
	summary = Summary::AddLine(summary, (ldap_tls) ? "Yes" : Summary::NotConfigured());

	return summary;
    }
}
