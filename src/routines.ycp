/* ------------------------------------------------------------------------------
 * Copyright (c) 2006-2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/ldap/routines.ycp
 * Package:	Configuration of LDAP
 * Summary:	Helper routines for string manupulations
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "ldap-client";

import "Ldap";

/**
 * Get RDN (relative distinguished name) from dn
 */
define string get_rdn (string dn) ``{

    list dn_list = splitstring (dn, ",");
    return dn_list[0]:dn;
}

/**
 * Get first value from dn (don't have to be "cn")
 */
define string get_cn (string dn) ``{

    string rdn	= get_rdn (dn);
    return issubstring (rdn, "=") ? substring (rdn, search (rdn,"=") + 1) : rdn;
}

/**
 * Create DN from cn by adding base config DN
 * (Can't work in general cases!)
 */
define string get_dn (string cn) ``{

    return sformat ("cn=%1,%2", cn, Ldap::base_config_dn);
}

/**
 * Create new DN from DN by changing leading cn value
 * (Can't work in general cases!)
 */
define string get_new_dn (string cn, string dn) ``{

    return tolower (sformat ("cn=%1%2", cn,
	issubstring (dn, ",") ? substring (dn, search (dn, ",")) : ""));
}

/**
 * Get string value of attribute from map.
 * (Generaly, it is supposed to be list or string.)
 */
define string get_string (map object, string attr) ``{

    if (is (object [attr]:nil, list))
	return object [attr,0]:"";
    return (string) (object [attr]:"");
}

}
